"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[88038],{71184:(e,a,s)=>{s.d(a,{R:()=>r,x:()=>i});var t=s(14041);const n={},c=t.createContext(n);function r(e){const a=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(c.Provider,{value:a},e.children)}},78908:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"@elizaos/namespaces/v2/type-aliases/MetadataObject","title":"MetadataObject","description":"@elizaos/core / v2 / MetadataObject","source":"@site/api/@elizaos/namespaces/v2/type-aliases/MetadataObject.md","sourceDirName":"@elizaos/namespaces/v2/type-aliases","slug":"/@elizaos/namespaces/v2/type-aliases/MetadataObject","permalink":"/api/@elizaos/namespaces/v2/type-aliases/MetadataObject","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"MessageReceivedHandlerParams","permalink":"/api/@elizaos/namespaces/v2/type-aliases/MessageReceivedHandlerParams"},"next":{"title":"PluginEvents","permalink":"/api/@elizaos/namespaces/v2/type-aliases/PluginEvents"}}');var n=s(31085),c=s(71184);const r={},i="Type Alias: MetadataObject",o={},l=[];function d(e){const a={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",strong:"strong",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.a,{href:"/api/",children:"@elizaos/core"})," / ",(0,n.jsx)(a.a,{href:"/api/@elizaos/namespaces/v2/",children:"v2"})," / MetadataObject"]}),"\n",(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"type-alias-metadataobject",children:"Type Alias: MetadataObject"})}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.strong,{children:"MetadataObject"})," = ",(0,n.jsx)(a.code,{children:"Record"}),"<",(0,n.jsx)(a.code,{children:"string"}),", ",(0,n.jsx)(a.code,{children:"unknown"}),">"]}),"\n"]}),"\n",(0,n.jsxs)(a.p,{children:["Defined in: ",(0,n.jsx)(a.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L2342",children:"packages/core/src/specs/v2/types.ts:2342"})]}),"\n",(0,n.jsxs)(a.p,{children:["A generic type for metadata objects, often used in various parts of the system like\n",(0,n.jsx)(a.code,{children:"Relationship"})," metadata or other extensible data structures.\nIt allows for arbitrary key-value pairs where values are of ",(0,n.jsx)(a.code,{children:"unknown"})," type,\nencouraging consumers to perform type checking or casting."]})]})}function p(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);