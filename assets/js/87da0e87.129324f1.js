"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[37079],{5958:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"@elizaos/namespaces/v2/interfaces/ChunkRow","title":"ChunkRow","description":"@elizaos/core / v2 / ChunkRow","source":"@site/api/@elizaos/namespaces/v2/interfaces/ChunkRow.md","sourceDirName":"@elizaos/namespaces/v2/interfaces","slug":"/@elizaos/namespaces/v2/interfaces/ChunkRow","permalink":"/api/@elizaos/namespaces/v2/interfaces/ChunkRow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Character","permalink":"/api/@elizaos/namespaces/v2/interfaces/Character"},"next":{"title":"Content","permalink":"/api/@elizaos/namespaces/v2/interfaces/Content"}}');var i=n(31085),r=n(71184);const a={},c="Interface: ChunkRow",o={},l=[{value:"Properties",id:"properties",level:2},{value:"id",id:"id",level:3}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/api/",children:"@elizaos/core"})," / ",(0,i.jsx)(s.a,{href:"/api/@elizaos/namespaces/v2/",children:"v2"})," / ChunkRow"]}),"\n",(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"interface-chunkrow",children:"Interface: ChunkRow"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L1367",children:"packages/core/src/specs/v2/types.ts:1367"})]}),"\n",(0,i.jsxs)(s.p,{children:["Represents a row structure, typically from a database query related to text chunking or processing.\nThis interface is quite minimal and seems to be a placeholder or a base for more specific chunk-related types.\nThe ",(0,i.jsx)(s.code,{children:"id"})," would be the unique identifier for the chunk.\nIt might be used when splitting large documents into smaller, manageable pieces for embedding or analysis."]}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"id",children:"id"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"id"}),": ",(0,i.jsx)(s.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L1369",children:"packages/core/src/specs/v2/types.ts:1369"})]}),"\n",(0,i.jsx)(s.p,{children:"The unique identifier for this chunk of text."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>c});var t=n(14041);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);