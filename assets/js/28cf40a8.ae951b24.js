"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[1777],{51820:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"@elizaos/namespaces/v2/interfaces/TokenizeTextParams","title":"TokenizeTextParams","description":"@elizaos/core / v2 / TokenizeTextParams","source":"@site/api/@elizaos/namespaces/v2/interfaces/TokenizeTextParams.md","sourceDirName":"@elizaos/namespaces/v2/interfaces","slug":"/@elizaos/namespaces/v2/interfaces/TokenizeTextParams","permalink":"/api/@elizaos/namespaces/v2/interfaces/TokenizeTextParams","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"TextToSpeechParams","permalink":"/api/@elizaos/namespaces/v2/interfaces/TextToSpeechParams"},"next":{"title":"TranscriptionParams","permalink":"/api/@elizaos/namespaces/v2/interfaces/TranscriptionParams"}}');var t=n(31085),i=n(71184);const a={},o="Interface: TokenizeTextParams",c={},p=[{value:"Properties",id:"properties",level:2},{value:"prompt",id:"prompt",level:3},{value:"modelType",id:"modeltype",level:3}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"/api/",children:"@elizaos/core"})," / ",(0,t.jsx)(s.a,{href:"/api/@elizaos/namespaces/v2/",children:"v2"})," / TokenizeTextParams"]}),"\n",(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"interface-tokenizetextparams",children:"Interface: TokenizeTextParams"})}),"\n",(0,t.jsxs)(s.p,{children:["Defined in: ",(0,t.jsx)(s.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L1404",children:"packages/core/src/specs/v2/types.ts:1404"})]}),"\n",(0,t.jsxs)(s.p,{children:["Parameters for tokenizing text, i.e., converting a string into a sequence of numerical tokens.\nThis is a common preprocessing step for many language models.\nThis structure is used with ",(0,t.jsx)(s.code,{children:"AgentRuntime.useModel"})," when the ",(0,t.jsx)(s.code,{children:"modelType"})," is ",(0,t.jsx)(s.code,{children:"ModelType.TEXT_TOKENIZER_ENCODE"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"prompt",children:"prompt"}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"prompt"}),": ",(0,t.jsx)(s.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Defined in: ",(0,t.jsx)(s.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L1406",children:"packages/core/src/specs/v2/types.ts:1406"})]}),"\n",(0,t.jsx)(s.p,{children:"The input string to be tokenized."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"modeltype",children:"modelType"}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"modelType"}),": ",(0,t.jsx)(s.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Defined in: ",(0,t.jsx)(s.a,{href:"https://github.com/sirgawain0x/elizaOS/blob/main/packages/core/src/specs/v2/types.ts#L1408",children:"packages/core/src/specs/v2/types.ts:1408"})]}),"\n",(0,t.jsx)(s.p,{children:"The model type to use for tokenization, which determines the tokenizer algorithm and vocabulary."})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},71184:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var r=n(14041);const t={},i=r.createContext(t);function a(e){const s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);